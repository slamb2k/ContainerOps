# File: jobs/deploy-web.yml

parameters:
- name: deploymentName
  type: string
  default: ''
- name: webAppServiceConnection
  type: string
  default: ''
- name: containerRegistry
  type: string
  default: ''  
- name: imageRepository
  type: string
  default: ''    
- name: tag
  type: string
  default: '$(Build.BuildId)'
- name: webAppName
  type: string
  default: ''    
- name: vmImageName
  type: string
  default: 'ubuntu-latest'
- name: environmentName
  type: string  
  default: ''

jobs:
- deployment: Deploy
  condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
  displayName: Deploy
  pool:
    vmImage: ${{ parameters.vmImageName }}
  environment: ${{ parameters.environmentName }}
  strategy:
    blueGreen:    
      deploy:              
        steps:                                   
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: '${{ parameters.webAppServiceConnection }}'
            appType: 'webAppContainer'
            WebAppName: '${{ parameters.webAppName }}'
            DockerNamespace: '${{ parameters.containerRegistry }}'
            DockerRepository: '${{ parameters.imageRepository }}'
            DockerImageTag: '${{ parameters.tag }}'
            DeployToSlotOrASEFlag: 'true'
            SlotName: 'Staging'                      # deploy to green
      routeTraffic:
        delay: 60m
        steps:
        - task: AzureAppServiceManage@0
          inputs:
            Action: 'Swap Slots'                                    # swap green with blue
            WebAppName: 'musicCarnivalWeb'
            sourceSlot: $(environment.staging)
            destinationSlot: $(environment.prod)
      postRouteTaffic:
        pool: server
        steps:          
        - script: echo monitor app health        
      on:
        failure:
          steps:
          - task: AzureAppServiceManage@0
            inputs:
              Action: 'Swap Slots'
              WebAppName: 'musicCarnivalWeb'
              sourceSlot: $(environment.prod)
              destinationSlot: $(environment.staging)    
        success:
          steps:
          - script: echo checks passed...